// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spray_event.proto

package com.qhx.proto.event;

/**
 * <pre>
 * 喷洒系统事件类型
 * </pre>
 *
 * Protobuf enum {@code qhx.proto.weve.event.spray.SprayEventType}
 */
public enum SprayEventType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SPRAY_EVENT_TYPE_UNKNOWN = 0;</code>
   */
  SPRAY_EVENT_TYPE_UNKNOWN(0),
  /**
   * <pre>
   * Odom状态
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_ODOM_LOST = 1;</code>
   */
  SPRAY_EVENT_TYPE_ODOM_LOST(1),
  /**
   * <pre>
   * TF坐标变换异常
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_TF_TRANSFORM_ERROR = 2;</code>
   */
  SPRAY_EVENT_TYPE_TF_TRANSFORM_ERROR(2),
  /**
   * <pre>
   * TensorRT加载模型失败
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_ERROR_TRT_LOAD_MODEL_FILE = 3;</code>
   */
  SPRAY_EVENT_TYPE_ERROR_TRT_LOAD_MODEL_FILE(3),
  /**
   * <pre>
   * TensorRT执行预测失败
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_ERROR_TRT_INFER_EXECUTE = 4;</code>
   */
  SPRAY_EVENT_TYPE_ERROR_TRT_INFER_EXECUTE(4),
  /**
   * <pre>
   * OPENCV异常
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_CV_EXCEPTION = 5;</code>
   */
  SPRAY_EVENT_TYPE_CV_EXCEPTION(5),
  /**
   * <pre>
   * 与STM32交互的UDP网络错误
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_UDP_ERROR = 6;</code>
   */
  SPRAY_EVENT_TYPE_UDP_ERROR(6),
  /**
   * <pre>
   * 相机连接异常
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_CAMERA_NOT_FOUND = 7;</code>
   */
  SPRAY_EVENT_TYPE_CAMERA_NOT_FOUND(7),
  /**
   * <pre>
   * 喷洒点
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_TARGET_POSITION = 10;</code>
   */
  SPRAY_EVENT_TYPE_TARGET_POSITION(10),
  /**
   * <pre>
   * 原始图像
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_IMAGE_ORIGINAL = 11;</code>
   */
  SPRAY_EVENT_TYPE_IMAGE_ORIGINAL(11),
  /**
   * <pre>
   * 预测结果，mask图像
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_IMAGE_MASK = 12;</code>
   */
  SPRAY_EVENT_TYPE_IMAGE_MASK(12),
  /**
   * <pre>
   * 图像存储开关状态
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_IMAGE_STORAGE_STATUS = 13;</code>
   */
  SPRAY_EVENT_TYPE_IMAGE_STORAGE_STATUS(13),
  /**
   * <pre>
   * 当前模型
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_CURRENT_MODEL_FILE = 14;</code>
   */
  SPRAY_EVENT_TYPE_CURRENT_MODEL_FILE(14),
  /**
   * <pre>
   * 喷洒点下发开关状态
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_SEND_POINT_STATUS = 15;</code>
   */
  SPRAY_EVENT_TYPE_SEND_POINT_STATUS(15),
  /**
   * <pre>
   * 录包开关状态
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_RECORD_SWITCH_STATUS = 16;</code>
   */
  SPRAY_EVENT_TYPE_RECORD_SWITCH_STATUS(16),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SPRAY_EVENT_TYPE_UNKNOWN = 0;</code>
   */
  public static final int SPRAY_EVENT_TYPE_UNKNOWN_VALUE = 0;
  /**
   * <pre>
   * Odom状态
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_ODOM_LOST = 1;</code>
   */
  public static final int SPRAY_EVENT_TYPE_ODOM_LOST_VALUE = 1;
  /**
   * <pre>
   * TF坐标变换异常
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_TF_TRANSFORM_ERROR = 2;</code>
   */
  public static final int SPRAY_EVENT_TYPE_TF_TRANSFORM_ERROR_VALUE = 2;
  /**
   * <pre>
   * TensorRT加载模型失败
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_ERROR_TRT_LOAD_MODEL_FILE = 3;</code>
   */
  public static final int SPRAY_EVENT_TYPE_ERROR_TRT_LOAD_MODEL_FILE_VALUE = 3;
  /**
   * <pre>
   * TensorRT执行预测失败
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_ERROR_TRT_INFER_EXECUTE = 4;</code>
   */
  public static final int SPRAY_EVENT_TYPE_ERROR_TRT_INFER_EXECUTE_VALUE = 4;
  /**
   * <pre>
   * OPENCV异常
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_CV_EXCEPTION = 5;</code>
   */
  public static final int SPRAY_EVENT_TYPE_CV_EXCEPTION_VALUE = 5;
  /**
   * <pre>
   * 与STM32交互的UDP网络错误
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_UDP_ERROR = 6;</code>
   */
  public static final int SPRAY_EVENT_TYPE_UDP_ERROR_VALUE = 6;
  /**
   * <pre>
   * 相机连接异常
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_CAMERA_NOT_FOUND = 7;</code>
   */
  public static final int SPRAY_EVENT_TYPE_CAMERA_NOT_FOUND_VALUE = 7;
  /**
   * <pre>
   * 喷洒点
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_TARGET_POSITION = 10;</code>
   */
  public static final int SPRAY_EVENT_TYPE_TARGET_POSITION_VALUE = 10;
  /**
   * <pre>
   * 原始图像
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_IMAGE_ORIGINAL = 11;</code>
   */
  public static final int SPRAY_EVENT_TYPE_IMAGE_ORIGINAL_VALUE = 11;
  /**
   * <pre>
   * 预测结果，mask图像
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_IMAGE_MASK = 12;</code>
   */
  public static final int SPRAY_EVENT_TYPE_IMAGE_MASK_VALUE = 12;
  /**
   * <pre>
   * 图像存储开关状态
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_IMAGE_STORAGE_STATUS = 13;</code>
   */
  public static final int SPRAY_EVENT_TYPE_IMAGE_STORAGE_STATUS_VALUE = 13;
  /**
   * <pre>
   * 当前模型
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_CURRENT_MODEL_FILE = 14;</code>
   */
  public static final int SPRAY_EVENT_TYPE_CURRENT_MODEL_FILE_VALUE = 14;
  /**
   * <pre>
   * 喷洒点下发开关状态
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_SEND_POINT_STATUS = 15;</code>
   */
  public static final int SPRAY_EVENT_TYPE_SEND_POINT_STATUS_VALUE = 15;
  /**
   * <pre>
   * 录包开关状态
   * </pre>
   *
   * <code>SPRAY_EVENT_TYPE_RECORD_SWITCH_STATUS = 16;</code>
   */
  public static final int SPRAY_EVENT_TYPE_RECORD_SWITCH_STATUS_VALUE = 16;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static SprayEventType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SprayEventType forNumber(int value) {
    switch (value) {
      case 0: return SPRAY_EVENT_TYPE_UNKNOWN;
      case 1: return SPRAY_EVENT_TYPE_ODOM_LOST;
      case 2: return SPRAY_EVENT_TYPE_TF_TRANSFORM_ERROR;
      case 3: return SPRAY_EVENT_TYPE_ERROR_TRT_LOAD_MODEL_FILE;
      case 4: return SPRAY_EVENT_TYPE_ERROR_TRT_INFER_EXECUTE;
      case 5: return SPRAY_EVENT_TYPE_CV_EXCEPTION;
      case 6: return SPRAY_EVENT_TYPE_UDP_ERROR;
      case 7: return SPRAY_EVENT_TYPE_CAMERA_NOT_FOUND;
      case 10: return SPRAY_EVENT_TYPE_TARGET_POSITION;
      case 11: return SPRAY_EVENT_TYPE_IMAGE_ORIGINAL;
      case 12: return SPRAY_EVENT_TYPE_IMAGE_MASK;
      case 13: return SPRAY_EVENT_TYPE_IMAGE_STORAGE_STATUS;
      case 14: return SPRAY_EVENT_TYPE_CURRENT_MODEL_FILE;
      case 15: return SPRAY_EVENT_TYPE_SEND_POINT_STATUS;
      case 16: return SPRAY_EVENT_TYPE_RECORD_SWITCH_STATUS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SprayEventType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SprayEventType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SprayEventType>() {
          public SprayEventType findValueByNumber(int number) {
            return SprayEventType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return SprayEventOuterClass.getDescriptor().getEnumTypes().get(0);
  }

  private static final SprayEventType[] VALUES = values();

  public static SprayEventType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SprayEventType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:qhx.proto.weve.event.spray.SprayEventType)
}

