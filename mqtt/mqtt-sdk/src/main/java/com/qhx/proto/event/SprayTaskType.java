// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spray_task.proto

package com.qhx.proto.event;

/**
 * <pre>
 * 喷洒任务类型
 * </pre>
 *
 * Protobuf enum {@code qhx.proto.weve.task.spray.SprayTaskType}
 */
public enum SprayTaskType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 喷洒开关控制任务
   * </pre>
   *
   * <code>SPRAY_TASK_TYPE_SPRAY_SWITCH = 0;</code>
   */
  SPRAY_TASK_TYPE_SPRAY_SWITCH(0),
  /**
   * <pre>
   * 液路水泵控制
   * </pre>
   *
   * <code>SPRAY_TASK_TYPE_PUMP_SWITCH = 1;</code>
   */
  SPRAY_TASK_TYPE_PUMP_SWITCH(1),
  /**
   * <pre>
   * 识别模型配置
   * </pre>
   *
   * <code>SPRAY_TASK_TYPE_MODEL_CONFIG = 2;</code>
   */
  SPRAY_TASK_TYPE_MODEL_CONFIG(2),
  /**
   * <pre>
   * 存储控制
   * </pre>
   *
   * <code>SPRAY_TASK_TYPE_STORAGE_SWITCH = 3;</code>
   */
  SPRAY_TASK_TYPE_STORAGE_SWITCH(3),
  /**
   * <pre>
   * 录制rosbag控制
   * </pre>
   *
   * <code>SPRAY_TASK_TYPE_RECORD_SWITCH = 4;</code>
   */
  SPRAY_TASK_TYPE_RECORD_SWITCH(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 喷洒开关控制任务
   * </pre>
   *
   * <code>SPRAY_TASK_TYPE_SPRAY_SWITCH = 0;</code>
   */
  public static final int SPRAY_TASK_TYPE_SPRAY_SWITCH_VALUE = 0;
  /**
   * <pre>
   * 液路水泵控制
   * </pre>
   *
   * <code>SPRAY_TASK_TYPE_PUMP_SWITCH = 1;</code>
   */
  public static final int SPRAY_TASK_TYPE_PUMP_SWITCH_VALUE = 1;
  /**
   * <pre>
   * 识别模型配置
   * </pre>
   *
   * <code>SPRAY_TASK_TYPE_MODEL_CONFIG = 2;</code>
   */
  public static final int SPRAY_TASK_TYPE_MODEL_CONFIG_VALUE = 2;
  /**
   * <pre>
   * 存储控制
   * </pre>
   *
   * <code>SPRAY_TASK_TYPE_STORAGE_SWITCH = 3;</code>
   */
  public static final int SPRAY_TASK_TYPE_STORAGE_SWITCH_VALUE = 3;
  /**
   * <pre>
   * 录制rosbag控制
   * </pre>
   *
   * <code>SPRAY_TASK_TYPE_RECORD_SWITCH = 4;</code>
   */
  public static final int SPRAY_TASK_TYPE_RECORD_SWITCH_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static SprayTaskType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SprayTaskType forNumber(int value) {
    switch (value) {
      case 0: return SPRAY_TASK_TYPE_SPRAY_SWITCH;
      case 1: return SPRAY_TASK_TYPE_PUMP_SWITCH;
      case 2: return SPRAY_TASK_TYPE_MODEL_CONFIG;
      case 3: return SPRAY_TASK_TYPE_STORAGE_SWITCH;
      case 4: return SPRAY_TASK_TYPE_RECORD_SWITCH;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SprayTaskType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SprayTaskType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SprayTaskType>() {
          public SprayTaskType findValueByNumber(int number) {
            return SprayTaskType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return SprayTaskOuterClass.getDescriptor().getEnumTypes().get(0);
  }

  private static final SprayTaskType[] VALUES = values();

  public static SprayTaskType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SprayTaskType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:qhx.proto.weve.task.spray.SprayTaskType)
}

