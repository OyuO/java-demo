// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_nav.proto

package com.qhx.proto.event;

/**
 * Protobuf enum {@code qhx.proto.weve.event.odometry.NavEventType}
 */
public enum NavEventType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>NAV_EVENT_TYPE_UNKNOWN = 0;</code>
   */
  NAV_EVENT_TYPE_UNKNOWN(0),
  /**
   * <code>NAV_EVENT_TYPE_ODOM_CONNECTED = 1;</code>
   */
  NAV_EVENT_TYPE_ODOM_CONNECTED(1),
  /**
   * <code>NAV_EVENT_TYPE_ODOM_LOST = 2;</code>
   */
  NAV_EVENT_TYPE_ODOM_LOST(2),
  /**
   * <code>NAV_EVENT_TYPE_ODOM_FRAME = 3;</code>
   */
  NAV_EVENT_TYPE_ODOM_FRAME(3),
  /**
   * <code>NAV_EVENT_TYPE_PLAN_TRAJECTORY = 4;</code>
   */
  NAV_EVENT_TYPE_PLAN_TRAJECTORY(4),
  /**
   * <code>NAV_EVENT_TYPE_FRAME_RELATION = 5;</code>
   */
  NAV_EVENT_TYPE_FRAME_RELATION(5),
  /**
   * <code>NAV_EVENT_TYPE_ERROR_INVALID_PATH = 6;</code>
   */
  NAV_EVENT_TYPE_ERROR_INVALID_PATH(6),
  /**
   * <code>NAV_EVENT_TYPE_INFO_AIM_CROP_LINE = 7;</code>
   */
  NAV_EVENT_TYPE_INFO_AIM_CROP_LINE(7),
  /**
   * <code>NAV_EVENT_TYPE_MOVING_DIRECTION = 8;</code>
   */
  NAV_EVENT_TYPE_MOVING_DIRECTION(8),
  /**
   * <code>NAV_EVENT_TYPE_WORKING_DISTANCE = 9;</code>
   */
  NAV_EVENT_TYPE_WORKING_DISTANCE(9),
  /**
   * <code>NAV_EVENT_TYPE_NOT_IN_FENCE = 10;</code>
   */
  NAV_EVENT_TYPE_NOT_IN_FENCE(10),
  /**
   * <code>NAV_EVENT_TYPE_NEED_MANUAL_CTRL = 11;</code>
   */
  NAV_EVENT_TYPE_NEED_MANUAL_CTRL(11),
  /**
   * <code>NAV_EVENT_TYPE_ARRIVED_DESTINATION = 12;</code>
   */
  NAV_EVENT_TYPE_ARRIVED_DESTINATION(12),
  /**
   * <code>NAV_EVENT_TYPE_ROBOT_STATUS = 13;</code>
   */
  NAV_EVENT_TYPE_ROBOT_STATUS(13),
  /**
   * <code>NAV_EVENT_TYPE_SENSOR_ONLINE_STATUS = 14;</code>
   */
  NAV_EVENT_TYPE_SENSOR_ONLINE_STATUS(14),
  /**
   * <code>NAV_EVENT_TYPE_SAMPLED_GPS_COORDS = 15;</code>
   */
  NAV_EVENT_TYPE_SAMPLED_GPS_COORDS(15),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>NAV_EVENT_TYPE_UNKNOWN = 0;</code>
   */
  public static final int NAV_EVENT_TYPE_UNKNOWN_VALUE = 0;
  /**
   * <code>NAV_EVENT_TYPE_ODOM_CONNECTED = 1;</code>
   */
  public static final int NAV_EVENT_TYPE_ODOM_CONNECTED_VALUE = 1;
  /**
   * <code>NAV_EVENT_TYPE_ODOM_LOST = 2;</code>
   */
  public static final int NAV_EVENT_TYPE_ODOM_LOST_VALUE = 2;
  /**
   * <code>NAV_EVENT_TYPE_ODOM_FRAME = 3;</code>
   */
  public static final int NAV_EVENT_TYPE_ODOM_FRAME_VALUE = 3;
  /**
   * <code>NAV_EVENT_TYPE_PLAN_TRAJECTORY = 4;</code>
   */
  public static final int NAV_EVENT_TYPE_PLAN_TRAJECTORY_VALUE = 4;
  /**
   * <code>NAV_EVENT_TYPE_FRAME_RELATION = 5;</code>
   */
  public static final int NAV_EVENT_TYPE_FRAME_RELATION_VALUE = 5;
  /**
   * <code>NAV_EVENT_TYPE_ERROR_INVALID_PATH = 6;</code>
   */
  public static final int NAV_EVENT_TYPE_ERROR_INVALID_PATH_VALUE = 6;
  /**
   * <code>NAV_EVENT_TYPE_INFO_AIM_CROP_LINE = 7;</code>
   */
  public static final int NAV_EVENT_TYPE_INFO_AIM_CROP_LINE_VALUE = 7;
  /**
   * <code>NAV_EVENT_TYPE_MOVING_DIRECTION = 8;</code>
   */
  public static final int NAV_EVENT_TYPE_MOVING_DIRECTION_VALUE = 8;
  /**
   * <code>NAV_EVENT_TYPE_WORKING_DISTANCE = 9;</code>
   */
  public static final int NAV_EVENT_TYPE_WORKING_DISTANCE_VALUE = 9;
  /**
   * <code>NAV_EVENT_TYPE_NOT_IN_FENCE = 10;</code>
   */
  public static final int NAV_EVENT_TYPE_NOT_IN_FENCE_VALUE = 10;
  /**
   * <code>NAV_EVENT_TYPE_NEED_MANUAL_CTRL = 11;</code>
   */
  public static final int NAV_EVENT_TYPE_NEED_MANUAL_CTRL_VALUE = 11;
  /**
   * <code>NAV_EVENT_TYPE_ARRIVED_DESTINATION = 12;</code>
   */
  public static final int NAV_EVENT_TYPE_ARRIVED_DESTINATION_VALUE = 12;
  /**
   * <code>NAV_EVENT_TYPE_ROBOT_STATUS = 13;</code>
   */
  public static final int NAV_EVENT_TYPE_ROBOT_STATUS_VALUE = 13;
  /**
   * <code>NAV_EVENT_TYPE_SENSOR_ONLINE_STATUS = 14;</code>
   */
  public static final int NAV_EVENT_TYPE_SENSOR_ONLINE_STATUS_VALUE = 14;
  /**
   * <code>NAV_EVENT_TYPE_SAMPLED_GPS_COORDS = 15;</code>
   */
  public static final int NAV_EVENT_TYPE_SAMPLED_GPS_COORDS_VALUE = 15;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static NavEventType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static NavEventType forNumber(int value) {
    switch (value) {
      case 0: return NAV_EVENT_TYPE_UNKNOWN;
      case 1: return NAV_EVENT_TYPE_ODOM_CONNECTED;
      case 2: return NAV_EVENT_TYPE_ODOM_LOST;
      case 3: return NAV_EVENT_TYPE_ODOM_FRAME;
      case 4: return NAV_EVENT_TYPE_PLAN_TRAJECTORY;
      case 5: return NAV_EVENT_TYPE_FRAME_RELATION;
      case 6: return NAV_EVENT_TYPE_ERROR_INVALID_PATH;
      case 7: return NAV_EVENT_TYPE_INFO_AIM_CROP_LINE;
      case 8: return NAV_EVENT_TYPE_MOVING_DIRECTION;
      case 9: return NAV_EVENT_TYPE_WORKING_DISTANCE;
      case 10: return NAV_EVENT_TYPE_NOT_IN_FENCE;
      case 11: return NAV_EVENT_TYPE_NEED_MANUAL_CTRL;
      case 12: return NAV_EVENT_TYPE_ARRIVED_DESTINATION;
      case 13: return NAV_EVENT_TYPE_ROBOT_STATUS;
      case 14: return NAV_EVENT_TYPE_SENSOR_ONLINE_STATUS;
      case 15: return NAV_EVENT_TYPE_SAMPLED_GPS_COORDS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<NavEventType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      NavEventType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<NavEventType>() {
          public NavEventType findValueByNumber(int number) {
            return NavEventType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return EventNav.getDescriptor().getEnumTypes().get(0);
  }

  private static final NavEventType[] VALUES = values();

  public static NavEventType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private NavEventType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:qhx.proto.weve.event.odometry.NavEventType)
}

